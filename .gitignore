# ──────────────────────────────────────────────────────────────
# Solana Token Seller - Git Ignore Configuration
# Following MONOCODE Principles: Observable, Explicit, Transparent
# ──────────────────────────────────────────────────────────────

# ══════════════════════════════════════════════════════════════
# Core Dependencies (Dependency Transparency)
# ══════════════════════════════════════════════════════════════
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json.bak

# ══════════════════════════════════════════════════════════════
# YAML Configuration Files (Progressive Construction)
# Excluding planning and configuration YAML files from version control
# ══════════════════════════════════════════════════════════════
*.yaml
*.yml

# ══════════════════════════════════════════════════════════════
# Runtime Logs & Output (Observable Implementation)
# Exclude generated logs while preserving structure
# ══════════════════════════════════════════════════════════════
logs/*.log
*.log
error.log
debug.log
performance.log

# ══════════════════════════════════════════════════════════════
# Temporary & Cache Files (Explicit Error Handling)
# Prevent accidental commits of temporary artifacts
# ══════════════════════════════════════════════════════════════
.tmp/
.cache/
temp/
*.tmp
*.swp
*.swo
*~

# ══════════════════════════════════════════════════════════════
# Environment & Secrets (Explicit Error Handling)
# Critical: Never commit sensitive data
# ══════════════════════════════════════════════════════════════
.env
.env.local
.env.development
.env.test
.env.production
secrets.json
private-keys.txt
*.pem
*.key

# ══════════════════════════════════════════════════════════════
# Development Tools (Observable Implementation)
# IDE and editor specific files
# ══════════════════════════════════════════════════════════════
.vscode/
.idea/
*.code-workspace
.DS_Store
Thumbs.db

# ══════════════════════════════════════════════════════════════
# Build & Distribution (Progressive Construction)
# Exclude build artifacts and distribution files
# ══════════════════════════════════════════════════════════════
dist/
build/
out/
*.tgz
*.tar.gz

# ══════════════════════════════════════════════════════════════
# Testing & Coverage (Explicit Error Handling)
# Exclude test artifacts while maintaining test files
# ══════════════════════════════════════════════════════════════
coverage/
nyc_output/
.coverage
.pytest_cache/

# ══════════════════════════════════════────────────────────────
# MONOCODE Compliance Notes:
# - Observable: Clear sections show what's excluded and why
# - Explicit: Prevents accidental commits of sensitive/generated data  
# - Transparent: Comments explain each section's purpose
# - Progressive: Structure allows easy extension as project grows
# ────────────────────────────────────────────────────────────── 